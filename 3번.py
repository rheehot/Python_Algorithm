#-*- coding:utf-8 -*-
"""스마트폰에서 많이 사용하는 화면 잠금 방식으로 '패턴(pattern) 잠금' 방식이 있습니다. '패턴 잠금'이란 9개의 점 중 원하는 점을 최대 9개까지 골라 순서대로 잇는 암호 방식으로, 점을 잇는 순서가 곧 암호가 됩니다. 
이때 잠금 패턴을 만들기 위해서 다음과 같이 몇 가지 규칙이 사용됩니다.

각 점은 최대 한 번씩만 사용됩니다. (사용되는 점은 한 번씩만 사용되고, 사용되지 않는 점이 있을 수 있습니다.)
두 점을 잇는 직선 위에 아직 패턴에 사용되지 않은 점이 있는 경우, 이 점을 건너뛰어 연결할 수 없습니다.
단, 이미 사용된 점은 건너뛰어 연결할 수 있습니다.
이 문제에서는 아래 그림과 같이 한 행에 3개씩 총 9개의 점이 x, y 좌표가 정수인 격자점에 있는 잠금 화면을 사용합니다. 가로, 세로 격자의 간격은 모두 동일합니다. 이후 그림에서 각 점은 왼쪽 위부터 순서대로 1부터 9까지의 번호를 붙여 표현합니다.

image

다음은 ‘패턴 잠금’ 화면을 나타낸 예시입니다.

image

①번의 경우 1-2-3, 2-3-1, 2-1-3, 3-2-1 순서의 연결은 가능하지만, 1-3-2, 3-1-2 순서의 연결은 2번 점을 아직 사용하지 않은 상태에서 건너뛰기 때문에 불가능합니다. ②번 또한 마찬가지로 3-5-7, 5-3-7, 5-7-3, 7-5-3 순서의 연결은 가능하나, 7-3-5, 3-7-5 순서의 연결은 5번 점을 사용하지 않은 상태에서 건너뛰게 되므로 불가능합니다.

이처럼 규칙을 지키며 점을 연결하는 경우 다양한 패턴이 나올 수 있습니다. 이때, K개의 점을 연결하여 패턴을 만들기 위해서는 (K - 1)개의 선을 사용해야 합니다. 아래는 규칙을 지키며 순서대로 점을 연결한 예시입니다.

image

1-2-5-8-9 순으로 점을 연결하여 패턴을 만들면 위 ③번과 같은 모양이 되며, 총 4개의 선을 사용했습니다. 이때, 1-2를 연결하는 선과 2-5를 연결하는 선은 2번 점에서 만나게 됩니다. 마찬가지로 2-5를 연결하는 선은 1-2, 5-8을 연결하는 선들과 각각 만나게 되며, 5-8을 연결하는 선은 2-5, 8-9를 연결하는 선들과 각각 만나게 됩니다. 8-9를 연결하는 선 또한 5-8을 연결하는 선과 만나게 됩니다. 각 선이 만나는 다른 선의 개수를 순서대로 구하면 [1,2,2,1]이 됩니다. 
마찬가지로, 1-6-8-3-4 순으로 점을 연결하여 패턴을 만들면 위 ④번과 같은 모양이 되며, 각 선이 만나는 다른 선의 개수를 순서대로 구하면 [3,2,3,2]가 됩니다.

'잠금 패턴'이 들어있는 배열 pattern이 매개변수로 주어질 때, 각 선이 한 점 또는 여러 점에서 만나는 다른 선의 개수를 순서대로 배열에 담아 return 하도록 solution 함수를 완성해주세요.

제한사항
pattern은 잠금 패턴을 이루는 점들의 번호가 순서대로 들어있는 배열로, 길이는 2 이상 9 이하입니다.
pattern에 들어있는 숫자의 순서가 점을 연결한 순서입니다.
'잠금 패턴'으로 가능한 경우, 즉 위에서 설명한 규칙을 지키는 경우만 입력으로 주어집니다.
<잠금 패턴 제한 사항 >

각 점은 최대 한 번씩만 사용됩니다. (사용되는 점은 한 번씩만 사용되고, 사용되지 않는 점이 있을 수 있습니다.)
두 점을 잇는 직선 위에 아직 패턴에 사용되지 않은 점이 있는 경우, 이 점을 건너뛰어 연결할 수 없습니다.
단, 이미 사용된 점은 건너뛰어 연결할 수 있습니다.
이 문제에서는 아래 그림과 같이 한 행에 3개씩 총 9개의 점이 x, y 좌표가 정수인 격자점에 있는 잠금 화면을 사용합니다. 가로, 세로 격자의 간격은 모두 동일합니다. 이후 그림에서 각 점은 왼쪽 위부터 순서대로 1부터 9까지의 번호를 붙여 표현합니다.
"""
# 진짜 이거는 잘 모르겠다.


def solution(pattern):
    answer = []
    
    return answer

solution([1,2,5,8,9])
